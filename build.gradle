apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'maven'

repositories {
  mavenCentral()
  maven {
    url 'file:' + System.getenv('HOME') + '/.md/repository'
  }
}

/* Because FindBugs doesn't print to the stderr ... */
task checkFindBugsReportMain << {
   def xmlReport = findbugsMain.reports.xml
   def slurped = new XmlSlurper().parse(xmlReport.destination)
   def report = ""
   slurped['BugInstance'].eachWithIndex { bug, index ->
       report += "${index + 1}. Found bug risk ${bug.@'type'} of category ${bug.@'category'} "
       report += "in the following places"
       bug['SourceLine'].each { place ->
           report += "\n       ${place.@'classname'} at lines ${place.@'start'}:${place.@'end'}"
       }
   }
   if (report.length() > 1) {
       logger.error "[FINDBUGS]\n ${report}"
   }
}

task checkFindBugsReportTest << {
   def xmlReport = findbugsTest.reports.xml
   def slurped = new XmlSlurper().parse(xmlReport.destination)
   def report = ""
   slurped['BugInstance'].eachWithIndex { bug, index ->
       report += "${index + 1}. Found bug risk ${bug.@'type'} of category ${bug.@'category'} "
       report += "in the following places"
       bug['SourceLine'].each { place ->
           report += "\n       ${place.@'classname'} at lines ${place.@'start'}:${place.@'end'}"
       }
   }
   if (report.length() > 1) {
       logger.error "[FINDBUGS]\n ${report}"
   }
}

task copyJars(type: Copy) {
  from configurations.compile
  into 'build/libs'
}

jar.dependsOn copyJars

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "io.gsonfire:gson-fire:1.8.0"
    compile "com.google.code.gson:gson:2.8.0"
    compile "javax.json:javax.json-api:1.0"
    compile "args4j:args4j:2.33"
    compile "com.google.code.findbugs:findbugs:3.0.1"
    compile "org.bouncycastle:bcprov-jdk15on:1.51"
    testCompile "junit:junit:4.11"
}

sourceSets {
    main {
        java {
            srcDir 'wallet'
            srcDir 'chain'
            srcDir 'examples'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
        events "passed", "skipped", "failed"
    }

    onOutput { descriptor, event ->
        logger.lifecycle(event.message)
   }
}

findbugsMain.finalizedBy checkFindBugsReportMain
findbugsTest.finalizedBy checkFindBugsReportTest
